框架思维

一、数据结构的存储方式
数据结构的存储方式只有两种：
1、数组 （顺序存储）： 紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)
2、链表 （链式存储）： 元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间

总结：数组扩容难，复杂O(N)；但无需存储指针，节约空间；连续索引
     链表不存在扩容问题，复杂度O(1); 但存储指针，需要更多空间；不连续

     数组和链表为结构基础， 散列表、栈、堆、树（二叉搜索树、AVL树、红黑树、区间树、B树）、队列、图等等各种数据结构都是基于数组和链表的 上层建筑


二、数据结构的基本操作
1、访问
2、遍历

方式：
  1、线性的 ： for\while
  2、非线性的 : 递归


二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。
总结：先刷二叉树, 回溯、动归、分治 都是树的问题，树的问题永远逃不开树的递归遍历框架这几行破代码
二叉树相关题目就是练习递归基本功

快速排序是树的前序遍历，归并排序是树的后序遍历

二叉树遍历框架
`
void traverse（TreeNode root） {
 //前序遍历
 traverse(root.left)
 //中序遍历
 traverse(root.right)
 //后序遍历
}
`

