package main

/**
职责单一
李氏替换


*/

/**
代码设计原则：
DRY原则  ： don't repeat yourself  不要重复造轮子
KISS原则 ： 简单原则 keep it stupid and simple   保持简单 保持愚蠢
迪米特法则：降低耦合，  又叫最少知识原则
表达原则： 增强代码可读性  PIE， 核心思想  代码即文档
职责分离原则：
五大面向对象原则：SOLID
   - S  SRP 单一职责  对象应该仅具有一种单一的功能。
   - O  OCP 开闭原则  程序对于扩展开放，对于修改封闭
   - L  LSP 里氏替换原则  程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的  通过继承实现多态行为
   - I  ISP 接口隔离原则  多个特定客户端接口要好于一个宽泛用途的接口
   - D  DIP 依赖反转原则 该原则认为一个方法应该遵从“依赖于抽象而不是一个实例”。 可以减少代码间订相互影响
惯例优于配置原则：Coc
关注点分离原则：Soc 将复杂问题拆分成小问题的好方法
契约原则：Dbc API设计的指导书   在软件设计时应该为软件组件定义一种精确和可验证的接口规范，这种规范要包括使用的预置条件、后置条件和不变条件，用来扩展普通抽象数据类型的定义

其他知识补充：
IOC 控制反转   设计原则  比如，你要开车去上班，这意味着你要控制一辆汽车，而 IoC 的理念是反转你的控制，你不用自己开车而是选择打车，让出租车师傅带你去上班，这时你的控制就发生了反转，出租车师傅专注于开车，而你专注于上班。
DI  依赖注入   实现 IoC 的设计模式  它允许在类之外创建依赖对象，并通过不同方式将这些对象提供给类。一般来讲，主要有三种方式来注入类：通过构造函数、通过属性和通过方法。
IOC （又叫作 DI 容器），是用于实现自动依赖注入的框架。它的作用是管理对象的创建及其生命周期，并提供向类注入依赖项的具体实现，这样做是为了我们不必手动创建和管理对象。


IoC 容器是一种技术框架，它用来管理对象的创建及其生命周期，提供依赖注入实现，是 DI 的具体实现；

DI 是一种设计模式，将依赖通过“注入”的方式提供给需要的类，是 DIP 和 IoC 的具体实现；

IoC 是一种设计原则（或设计模式），将代码本职之外的工作交由某个第三方（框架）完成，与 DIP 相似；

DIP 是一种设计原则，它认为高层组件的功能不应该依赖下层组件的实现，而应该提供抽象层让下层依赖，与 IoC 有异曲同工之妙。
*/

/**
知识补充： AOP 面向切面编程
spring框架的核心功能，还是业务降低耦合的有效手段

面向切面编程，简单来说，就是可以在不修改已有程序代码功能的前提下给程序动态添加功能的一种技术。

如果说迪米特法则是在程序设计时（静态） 降低代码耦合的方法的话，那么面向切面编程就是在程序运行期间（动态） 降低代码耦合的方法。

AOP和OOP虽然都强调降低耦合，但是关注点却截然不同

OOP 强调对象内在的自洽性，更适合

业务功能，比如商品、订单、会员。而对于统一的行为动作，如日志记录、性能统计、权限控制、事务处理等，使用 AOP 则更合适，通过关注系统本身的行为，而不去影响功能业务逻辑的实现和演进。
*/

/**

Dubbo 框架就是为微服务架构模式下的不同服务提供了一种良好的 RPC 通信机制
*/
